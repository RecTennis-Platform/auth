generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model affiliates {
  id                Int             @id @default(autoincrement())
  companyName       String          @map("company_name") @db.VarChar(255)
  contactPersonName String          @map("contact_person_name") @db.VarChar(255)
  phone             String
  email             String
  website           String
  taxNumber         String          @map("tax_number") @db.VarChar(255)
  description       String
  status            AffiliateStatus @default(pending)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
}

model mobile_mini_apps {
  id               Int      @id @default(autoincrement())
  name             String   @unique
  code             String   @unique
  iosBundleUrl     String   @map("ios_bundle_url")
  androidBundleUrl String   @map("android_bundle_url")
  level            Int      @default(0)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
}

model news {
  id          Int      @id @default(autoincrement())
  image       String
  title       String
  description String?
  content     String
  author      String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model groups {
  id                   Int                 @id @default(autoincrement())
  name                 String
  language             String?
  activityZone         String?             @map("activity_zone")
  description          String?
  status               GroupStatus         @default(active)
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  image                String?
  purchased_package_id String
  max_member           Int
  group_tournaments    group_tournaments[]
  member_ships         member_ships[]
}

model posts {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  groupId   Int      @map("group_id")
  image     String?
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model packages {
  id                Int                 @id @default(autoincrement())
  name              String
  price             Float
  duration          Int
  images            String[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  description       String?
  features          String[]
  orders            orders[]
  packages_services packages_services[]
}

model services {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  config            String
  packages_services packages_services[]
}

model orders {
  id        String      @id @default(uuid())
  userId    Int         @map("user_id")
  packageId Int         @map("package_id")
  price     Float
  status    OrderStatus @default(new)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  package   packages    @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_orders_packages")
  users     users       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_orders_users")
}

model member_ships {
  userId    Int        @map("user_id")
  groupId   Int        @map("group_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  role      MemberRole @default(member)
  group     groups     @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_ships_groups")
  users     users      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_member_ships_users")

  @@id([userId, groupId])
}

model users {
  id                             Int                              @id @default(autoincrement())
  email                          String                           @unique
  password                       String?
  name                           String
  image                          String?
  refreshToken                   String?                          @map("refresh_token")
  resetPassword                  Boolean                          @default(false) @map("reset_password")
  createdAt                      DateTime                         @default(now()) @map("created_at")
  updatedAt                      DateTime                         @updatedAt @map("updated_at")
  role                           UserRole                         @default(user)
  gender                         Gender
  group_tournament_registrations group_tournament_registrations[]
  memberShips                    member_ships[]
  orders                         orders[]
}

model group_tournament_registrations {
  group_tournament_id Int
  user_id             Int
  created_at          DateTime          @default(now())
  updated_at          DateTime
  group_tournaments   group_tournaments @relation(fields: [group_tournament_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_tournament_registrations_group_tournaments")
  users               users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_tournament_registrations_users")

  @@id([group_tournament_id, user_id])
}

model group_tournaments {
  id                             Int                              @id @default(autoincrement())
  group_id                       Int
  name                           String
  description                    String
  image_url                      String
  format                         GroupTournamentFormat
  status                         GroupTournamentStatus            @default(upcoming)
  phase                          GroupTournamentPhase             @default(new)
  start_date                     DateTime
  end_date                       DateTime
  address                        String
  created_at                     DateTime                         @default(now())
  updated_at                     DateTime
  group_tournament_registrations group_tournament_registrations[]
  groups                         groups                           @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_tournaments_groups")
}

model packages_services {
  package_id Int
  service_id Int
  created_at DateTime @default(now())
  updated_at DateTime
  packages   packages @relation(fields: [package_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_packages_services_packages")
  services   services @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_packages_services_services")

  @@id([package_id, service_id])
}

model tournaments {
  id                      Int              @id @default(autoincrement())
  purchased_package_id    String
  name                    String
  max_participants        Int
  gender                  Gender?
  format                  TournamentFormat
  participant_type        ParticipantType
  description             String?
  players_born_after_date DateTime
  registration_due_date   DateTime
  start_date              DateTime
  end_date                DateTime
  status                  TournamentStatus @default(upcoming)
  address                 String
  contact_person_name     String
  contact_number          String
  contact_email           String
  created_at              DateTime         @default(now())
  updated_at              DateTime
  phase                   TournamentPhase  @default(new)
  image                   String?
}

model tournament_registrations {
  id            Int                @id @default(autoincrement())
  tournament_id Int
  user_id_1     Int
  user_id_2     Int?
  name          String
  message       String?
  status        RegistrationStatus
  created_at    DateTime           @default(now())
  updated_at    DateTime
  applied_date  DateTime?
}

enum AffiliateStatus {
  pending
  approved
  rejected
}

enum GroupStatus {
  active
  expired
}

enum OrderStatus {
  new
  completed
  cancelled
}

enum UserRole {
  admin
  user
}

enum Gender {
  male
  female
}

enum GroupTournamentFormat {
  round_robin
  knockout
}

enum GroupTournamentPhase {
  new
  published
  generated_fixtures
  scored_matches
  completed
}

enum GroupTournamentStatus {
  on_going
  upcoming
  completed
}

enum MemberRole {
  group_admin
  member
}

enum ParticipantType {
  singles
  doubles
  mixed_doubles
}

enum TournamentFormat {
  round_robin
  knockout
  group_playoff
}

enum TournamentPhase {
  new
  published
  finalized_applicants
  generated_fixtures
  scored_matches
  completed
}

enum TournamentStatus {
  on_going
  upcoming
  completed
}

enum RegistrationStatus {
  inviting
  canceled
  pending
  approved
  rejected
}
